name: Build & Release UnicodeFontSet Magisk Module

on:
  push:
    branches:
      - main
    tags:
      - '[vV]*'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  id-token: write

env:
  FONT_DIR: system/fonts
  UPDATE_BIN: META-INF/com/google/android/update-binary
  BUILD_DIR: build
  ZIP_NAME: UnicodeFontSet-magisk-module.zip

jobs:
  build:
    name: Build ZIP Artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create directories
        run: |
          mkdir -p ${{ env.FONT_DIR }} ${{ env.BUILD_DIR }} $(dirname ${{ env.UPDATE_BIN }})

      - name: Download fonts & scripts
        run: |
          declare -A files=(
            [PlangothicP1-Regular.ttf]=https://github.com/Fitzgerald-Porthmouth-Koenigsegg/Plangothic_Project/raw/build/fonts/static/PlangothicP1-Regular.ttf
            [PlangothicP2-Regular.ttf]=https://github.com/Fitzgerald-Porthmouth-Koenigsegg/Plangothic_Project/raw/build/fonts/static/PlangothicP2-Regular.ttf
            [NotoColorEmoji.ttf]=https://github.com/googlefonts/noto-emoji/raw/main/fonts/Noto-COLRv1.ttf
            [CtrlCtrl.otf]=https://github.com/MY1L/Ctrl/releases/download/Ctr1/CtrlCtrl-1.1.otf
            [NotoUnicode.otf]=https://github.com/MY1L/Unicode/releases/download/NotoUni7/NotoUnicode-7.3.otf
            [MonuTemp.ttf]=https://github.com/MY1L/Unicode/releases/download/Temp/MonuTemp-0.920.ttf
            [LastResort-Regular.ttf]=https://github.com/unicode-org/last-resort-font/releases/latest/download/LastResort-Regular.ttf
            [NotoSansKR-Regular.otf]=https://github.com/notofonts/noto-cjk/raw/main/Sans/SubsetOTF/KR/NotoSansKR-Regular.otf
            [NotoSansSC-Regular.otf]=https://github.com/notofonts/noto-cjk/raw/main/Sans/SubsetOTF/SC/NotoSansSC-Regular.otf
            [UnicodiaDaarage.otf]=https://github.com/Mercury13/unicodia/raw/main/Fonts/UnicodiaDaarage.otf
            [UnicodiaSesh.ttf]=https://github.com/Mercury13/unicodia/raw/main/Fonts/UnicodiaSesh.ttf
            [NewGardiner.ttf]=https://github.com/Mercury13/unicodia/raw/main/Fonts/NewGardiner.ttf
          )
          for name in "${!files[@]}"; do
            wget -q "${files[$name]}" -O "${{ env.FONT_DIR }}/$name"
          done
          wget -q https://github.com/topjohnwu/Magisk/raw/master/scripts/module_installer.sh \
               -O "${{ env.UPDATE_BIN }}"

      - name: Update versionCode for Nightly Builds
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          VERSION_DATE=$(date +%Y%m%d)
          VERSION_CODE="${VERSION_DATE}1"
          sed -i "s/^versionCode=.*/versionCode=${VERSION_CODE}/" module.prop
          sed -i "/^version=/ s/$/ (${GITHUB_SHA:0:7}-Nightly)/" module.prop

      - name: Package ZIP & compute checksum
        run: |
          zip -9 \
           -x "*.git*" \
           -x "extra/*" \
           -x "${{ env.BUILD_DIR }}/*" \
           -x "documentation/*" \
           -r ../${{ env.ZIP_NAME }} ./

      - name: Collect artifacts
        run: |
          mv ../${{ env.ZIP_NAME }} ${{ env.BUILD_DIR }}/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: module-artifacts
          path: ${{ env.BUILD_DIR }}

  release:
    name: 正式 Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: module-artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: |
            ${{ env.ZIP_NAME }}
          draft: false
          prerelease: false

  nightly:
    name: Nightly Release
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: module-artifacts

      - name: Format commit message
        id: format_commit
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          title=$(echo "$commit_message" | head -n1)
          body=$(echo "$commit_message" | tail -n +2 | sed 's/^/>/g' | tr '\n' '\n')

          if [ -n "$body" ]; then
            formatted_message="$title (${{ github.actor }})\n$body"
          else
            formatted_message="$title (${{ github.actor }})"
          fi

          echo "FORMATTED_MESSAGE<<EOF" >> $GITHUB_OUTPUT
          echo -e "$formatted_message" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Delete existing nightly release
        run: |
          gh release delete nightly --yes || true
          git push --delete origin nightly || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Nightly Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nightly
          name: Nightly build ${{ github.run_number }}
          body: |
            ## Commits
            ${{ steps.commits.outputs.COMMITS }}
            - ${{ github.sha }}: ${{ steps.format_commit.outputs.FORMATTED_MESSAGE }}
          files: |
            ${{ env.ZIP_NAME }}
          prerelease: true
          make_latest: false